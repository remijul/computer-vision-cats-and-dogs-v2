# Nom du workflow affiché dans l'interface GitHub Actions
name: CI

# Configuration des déclencheurs
on:
  push:
    branches: [ main ]  # Le workflow se déclenche uniquement sur les push vers la branche main

jobs:
  # Job principal pour les tests
  test:
    # Utilise la dernière version d'Ubuntu comme environnement d'exécution
    runs-on: ubuntu-latest
    
    # Variables d'environnement globales pour le job (les secrets sont définis sur le repo Github dans : Settings > Secrets and variables > Actions)
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PWD: ${{ secrets.DB_PWD }}
    
    # Service PostgreSQL temporaire pour les tests
    services:
      postgres:
        image: postgres:15  # Version PostgreSQL utilisée
        env:
          POSTGRES_PASSWORD: ${{ secrets.DB_PWD }}  # Mot de passe administrateur
          POSTGRES_USER: ${{ secrets.DB_USER }}     # Utilisateur de base de données
          POSTGRES_DB: ${{ secrets.DB_NAME }}       # Nom de la base de données
        options: >-
          --health-cmd pg_isready                   # Commande de vérification de santé
          --health-interval 10s                     # Intervalle entre les vérifications
          --health-timeout 5s                       # Délai d'attente pour chaque vérification
          --health-retries 5                        # Nombre de tentatives avant échec
        ports:
          - 5432:5432  # Exposition du port PostgreSQL standard
    
    steps:
    # Étape 1 : Récupération du code source
    - name: Clone repository
      uses: actions/checkout@v4  # Action officielle pour cloner le repository
    
    # Étape 2 : Configuration de l'environnement Python
    - name: Set up Python
      uses: actions/setup-python@v4  # Action officielle pour installer Python
      with:
        python-version: 3.11  # Version spécifique de Python à utiliser
    
    # Étape 3 : Installation des dépendances
    - name: Install dependencies
      run: |
        # Installation des dépendances de base du projet
        pip install -r requirements/base.txt
        # Installation de pytest et du driver PostgreSQL pour les tests
        pip install pytest psycopg2-binary
    
    # Étape 4 : Préparation de l'environnement de test
    - name: Setup test environment
      run: |
        # Création des répertoires nécessaires pour les tests
        mkdir -p data/processed/models
        # Création d'un fichier modèle factice pour les tests
        # (évite les erreurs si l'API cherche ce fichier au démarrage)
        touch data/processed/models/cats_dogs_model.keras
        # Création de la table predictions_feedback dans PostgreSQL
        python src/database/table_creator.py
    
    # Étape 5 : Tests de la base de données
    - name: Test database
      run: |
        # Exécution des tests de connexion et structure de la base de données
        python tests/test_database_simple.py
    
    # Étape 6 : Tests de l'API
    - name: Test API
      run: |
        # Démarrage de l'API en arrière-plan (&)
        python scripts/run_api.py &
        # Attente de 10 secondes pour que l'API soit complètement démarrée
        sleep 10
        # Exécution des tests d'intégration de l'API
        python tests/test_api_simple.py